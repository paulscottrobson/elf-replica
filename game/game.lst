 AS V1.42 Beta [Bld 102] - source file game.asm - page 1 - 6/30/2016 14:54:37


       1/       0 :                     
       2/       0 :                     	include 1802.inc
(1)    1/       0 :                     ; ************************************************************************************************************
(1)    2/       0 :                     ; ************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;												1802 Generic Routines
(1)    5/       0 :                     ;
(1)    6/       0 :                     ; ************************************************************************************************************
(1)    7/       0 :                     ; ************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 :                     	cpu 	1802
(1)   10/       0 :                     
(1)   11/       0 : =0H                 r0 = 0 																			; register names
(1)   12/       0 : =1H                 r1 = 1
(1)   13/       0 : =2H                 r2 = 2
(1)   14/       0 : =3H                 r3 = 3
(1)   15/       0 : =4H                 r4 = 4
(1)   16/       0 : =5H                 r5 = 5
(1)   17/       0 : =6H                 r6 = 6
(1)   18/       0 : =7H                 r7 = 7
(1)   19/       0 : =8H                 r8 = 8
(1)   20/       0 : =9H                 r9 = 9
(1)   21/       0 : =AH                 ra = 10
(1)   22/       0 : =BH                 rb = 11
(1)   23/       0 : =CH                 rc = 12
(1)   24/       0 : =DH                 rd = 13
(1)   25/       0 : =EH                 re = 14
(1)   26/       0 : =FH                 rf = 15
(1)   27/       0 :                     
(1)   28/       0 :                     lri Macro 	reg,address 														; load constant into 16 bit reg
(1)   29/       0 :                     	ldi 	(address)/256
(1)   30/       0 :                     	phi 	reg
(1)   31/       0 :                     	ldi 	(address)&255
(1)   32/       0 :                     	plo 	reg
(1)   33/       0 :                     	endm
(1)   34/       0 :                     
(1)   35/       0 :                     call Macro 	reg,address 														; call routine via mark.
(1)   36/       0 :                     	lri 	reg,address
(1)   37/       0 :                     	mark
(1)   38/       0 :                     	sep 	reg
(1)   39/       0 :                     	dec 	r2
(1)   40/       0 :                     	endm
(1)   41/       0 :                     
(1)   42/       0 :                     return Macro 																	; return from routine
(1)   43/       0 :                     	sex 	r2
(1)   44/       0 :                     	inc 	r2
(1)   45/       0 :                     	ret
(1)   46/       0 :                     	endm
(1)   47/       0 :                     
(1)   48/       0 :                     
       3/       0 :                     
       4/       0 : =F00H               display = 	0F00h																; this page has the display in it
       5/       0 : =E00H               map = 		0E00h 																; this page has the map in it.
       6/       0 : =DFFH               stack = 	0DFFh 																; stack top
       7/       0 :                     
       8/       0 : 70                  	ret 																		; 1802 interrupts on. 
       9/       1 : (MACRO)             	lri 	r1,Interrupt 														; set interrupt vector
       9/       1 : F8 00                       ldi     (INTERRUPT)/256
       9/       3 : B1                          phi     R1
       9/       4 : F8 34                       ldi     (INTERRUPT)&255
 AS V1.42 Beta [Bld 102] - source file game.asm - page 2 - 6/30/2016 14:54:37


       9/       6 : A1                          plo     R1
      10/       7 : (MACRO)             	lri 	r2,Stack 															; set stack address
      10/       7 : F8 0D                       ldi     (STACK)/256
      10/       9 : B2                          phi     R2
      10/       A : F8 FF                       ldi     (STACK)&255
      10/       C : A2                          plo     R2
      11/       D : F8 11               	ldi 	Main & 255 															; switch to R3 as program pointer
      12/       F : A3                  	plo 	r3
      13/      10 : D3                  	sep 	r3 																	; go to main routine
      14/      11 :                     Main:
      15/      11 :                     
      16/      11 :                     Next:
      17/      11 : (MACRO)             	call 	r4,RandomNumber
      17/      11 :  (MACRO-2)                  lri     R4,RANDOMNUMBER
      17/      11 : F8 00                       ldi     (RANDOMNUMBER)/256
      17/      13 : B4                          phi     R4
      17/      14 : F8 B5                       ldi     (RANDOMNUMBER)&255
      17/      16 : A4                          plo     R4
      17/      17 : 79                          mark
      17/      18 : D4                          sep     R4
      17/      19 : 22                          dec     r2
      18/      1A : 30 11               	br 		Next
      19/      1C :                     
      20/      1C : E2                  	sex 	r2 																	; turn video on
      21/      1D : 69                  	inp		1
      22/      1E : (MACRO)             	call 	r4,RepaintDisplay 													; clear screen and draw walls
      22/      1E :  (MACRO-2)                  lri     R4,REPAINTDISPLAY
      22/      1E : F8 00                       ldi     (REPAINTDISPLAY)/256
      22/      20 : B4                          phi     R4
      22/      21 : F8 50                       ldi     (REPAINTDISPLAY)&255
      22/      23 : A4                          plo     R4
      22/      24 : 79                          mark
      22/      25 : D4                          sep     R4
      22/      26 : 22                          dec     r2
      23/      27 :                     	; Open doors
      24/      27 : (MACRO)             	call 	r4,MirrorDisplay 													; mirror top of display to bottom
      24/      27 :  (MACRO-2)                  lri     R4,MIRRORDISPLAY
      24/      27 : F8 00                       ldi     (MIRRORDISPLAY)/256
      24/      29 : B4                          phi     R4
      24/      2A : F8 9F                       ldi     (MIRRORDISPLAY)&255
      24/      2C : A4                          plo     R4
      24/      2D : 79                          mark
      24/      2E : D4                          sep     R4
      24/      2F : 22                          dec     r2
      25/      30 :                     	; draw princess
      26/      30 :                     	; draw status.
      27/      30 :                     
      28/      30 :                     wait:
      29/      30 : 30 30               	br 		wait
      30/      32 :                     
      31/      32 :                     	include interrupt.asm														; screen driver
(1)    1/      32 :                     ; ************************************************************************************************************
(1)    2/      32 :                     ; ************************************************************************************************************
(1)    3/      32 :                     ;
(1)    4/      32 :                     ;											1861 Display Routine
(1)    5/      32 :                     ;
(1)    6/      32 :                     ; ************************************************************************************************************
(1)    7/      32 :                     ; ************************************************************************************************************
(1)    8/      32 :                     
(1)    9/      32 :                     Return:
 AS V1.42 Beta [Bld 102] - source file game.asm(interrupt.asm) - page 3 - 6/30/2016 14:54:37


(1)   10/      32 : 72                  	ldxa 																		; restore D
(1)   11/      33 : 70                  	ret 																		; restore X,P
(1)   12/      34 :                     Interrupt:
(1)   13/      34 : 22                  	dec 	r2 																	; save return XP on stack
(1)   14/      35 : 78                  	sav
(1)   15/      36 : 22                  	dec 	r2 																	; save D on stack
(1)   16/      37 : 52                  	str 	r2
(1)   17/      38 : C4                  	nop 																		; pad out cycles till rendering
(1)   18/      39 : C4                  	nop
(1)   19/      3A : C4                  	nop
(1)   20/      3B : (MACRO)             	lri 	r0,display 															; draw from here
(1)   20/      3B : F8 0F                       ldi     (DISPLAY)/256
(1)   20/      3D : B0                          phi     R0
(1)   20/      3E : F8 00                       ldi     (DISPLAY)&255
(1)   20/      40 : A0                          plo     R0
(1)   21/      41 :                     Refresh:
(1)   22/      41 : 80                  	glo 	r0 																	; do four scan lines for each row
(1)   23/      42 : E2                  	sex 	r2
(1)   24/      43 :                     
(1)   25/      43 : E2                  	sex 	r2
(1)   26/      44 : 20                  	dec 	r0
(1)   27/      45 : A0                  	plo 	r0
(1)   28/      46 :                     
(1)   29/      46 : E2                  	sex 	r2
(1)   30/      47 : 20                  	dec 	r0
(1)   31/      48 : A0                  	plo 	r0
(1)   32/      49 :                     
(1)   33/      49 : E2                  	sex 	r2
(1)   34/      4A : 20                  	dec 	r0
(1)   35/      4B : A0                  	plo 	r0
(1)   36/      4C :                     
(1)   37/      4C : 3C 41               	bn1 	Refresh 															; in emulator we never loop back
(1)   38/      4E : 30 32               	br 		Return
(1)   39/      50 :                     
      32/      50 :                     	include repaint.asm 														; repaint outline and mirror code
(1)    1/      50 :                     ; ************************************************************************************************************
(1)    2/      50 :                     ; ************************************************************************************************************
(1)    3/      50 :                     ;
(1)    4/      50 :                     ;						 	Draw the Outline Frame (with no doors) - top half only.
(1)    5/      50 :                     ;
(1)    6/      50 :                     ;	Uses RC,RD,RE,RF
(1)    7/      50 :                     ; ************************************************************************************************************
(1)    8/      50 :                     ; ************************************************************************************************************
(1)    9/      50 :                     
(1)   10/      50 :                     RepaintDisplay:
(1)   11/      50 : F8 0F               	ldi 	display/256 														; rc points to display position.
(1)   12/      52 : BC                  	phi 	rc 																	; so does rd as we're going to clear it
(1)   13/      53 : BD                  	phi 	rd 																	; the top half of the screen
(1)   14/      54 : F8 00               	ldi 	0
(1)   15/      56 : AC                  	plo 	rc
(1)   16/      57 : AD                  	plo 	rd
(1)   17/      58 :                     _RDClear:
(1)   18/      58 : 8C                  	glo 	rc 																	; rc.0 is zero
(1)   19/      59 : 5D                  	str 	rd 																	; fill display RAM with it.
(1)   20/      5A : 1D                  	inc 	rd
(1)   21/      5B : 8D                  	glo 	rd
(1)   22/      5C : FE                  	shl 																		; only do it half way as we copy
(1)   23/      5D : 3B 58               	bnf 	_RDClear 															; the bottom half.
(1)   24/      5F :                     
(1)   25/      5F :                     ; ************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file game.asm(repaint.asm) - page 4 - 6/30/2016 14:54:37


(1)   26/      5F :                     ;									    Come back here to reset the masks
(1)   27/      5F :                     ; ************************************************************************************************************
(1)   28/      5F :                     
(1)   29/      5F :                     _RDResetMasks:
(1)   30/      5F : F8 C0               	ldi 	0C0h 																; rf.0 is 11000000 (left write)
(1)   31/      61 : AF                  	plo 	rf
(1)   32/      62 : F8 03               	ldi 	3 																	; rf.1 is 00000011 (right write)
(1)   33/      64 : BF                  	phi 	rf
(1)   34/      65 :                     
(1)   35/      65 :                     ; ************************************************************************************************************
(1)   36/      65 :                     ;				Main repaint loop. rc points to the line position. rf.0 left mask rf.1 right mask
(1)   37/      65 :                     ; ************************************************************************************************************
(1)   38/      65 :                     
(1)   39/      65 :                     _RDLoop:
(1)   40/      65 : 9C                  	ghi		rc 																	; copy rc.1 to rd.1 and re.1
(1)   41/      66 : BD                  	phi 	rd 																	
(1)   42/      67 : BE                  	phi 	re
(1)   43/      68 : 8C                  	glo 	rc 																	; are there no solid blocks yet ?
(1)   44/      69 : FA 07               	ani 	7
(1)   45/      6B : 32 7E               	bz 		_RDNoSolid
(1)   46/      6D :                     
(1)   47/      6D :                     ; ************************************************************************************************************
(1)   48/      6D :                     ;					This draws solid blocks - fill in a whole byte at a time, on left and right
(1)   49/      6D :                     ; ************************************************************************************************************
(1)   50/      6D :                     
(1)   51/      6D : 8C                  	glo 	rc 																	; rd.0 will point to left bit
(1)   52/      6E : AD                  	plo 	rd
(1)   53/      6F : FB 07               	xri 	7																	; rd.1 will point to right bit
(1)   54/      71 : AE                  	plo 	re																	
(1)   55/      72 : 2D                  	dec 	rd
(1)   56/      73 :                     
(1)   57/      73 :                     _RDDrawByteBlocks:
(1)   58/      73 : F8 FF               	ldi 	0FFh 																; write solid block on left.
(1)   59/      75 : 5D                  	str 	rd
(1)   60/      76 : 5E                  	str 	re
(1)   61/      77 : 2D                  	dec 	rd 																	; move left left and right right
(1)   62/      78 : 1E                  	inc 	re
(1)   63/      79 : 8E                  	glo 	re 																	; if right hasn't wrapped around
(1)   64/      7A : FA 07               	ani 	7
(1)   65/      7C : 3A 73               	bnz 	_RDDrawByteBlocks
(1)   66/      7E :                     _RDNoSolid:
(1)   67/      7E :                     
(1)   68/      7E :                     ; ************************************************************************************************************
(1)   69/      7E :                     ;						This writes out the current masks and goes to the next line.
(1)   70/      7E :                     ; ************************************************************************************************************
(1)   71/      7E :                     
(1)   72/      7E : 8C                  	glo 	rc 																	; set rd and re to point to write
(1)   73/      7F : AD                  	plo 	rd
(1)   74/      80 : FB 07               	xri 	7
(1)   75/      82 : AE                  	plo 	re
(1)   76/      83 :                     
(1)   77/      83 : 8C                  	glo 	rc 																	; point rc to the next line.
(1)   78/      84 : FC 08               	adi 	8
(1)   79/      86 : AC                  	plo 	rc
(1)   80/      87 :                     
(1)   81/      87 : 8F                  	glo 	rf																	; write left mask
(1)   82/      88 : 5D                  	str 	rd
(1)   83/      89 : F6                  	shr 																		; update the left mask.
(1)   84/      8A : F6                  	shr	
(1)   85/      8B : F9 C0               	ori 	0C0h
 AS V1.42 Beta [Bld 102] - source file game.asm(repaint.asm) - page 5 - 6/30/2016 14:54:37


(1)   86/      8D : AF                  	plo 	rf
(1)   87/      8E :                     
(1)   88/      8E : 9F                  	ghi 	rf 																	; write right mask
(1)   89/      8F : 5E                  	str 	re
(1)   90/      90 : FE                  	shl 																		; update the right mask.
(1)   91/      91 : FE                  	shl 
(1)   92/      92 : F9 03               	ori 	3
(1)   93/      94 : BF                  	phi	 	rf
(1)   94/      95 :                     
(1)   95/      95 : 3B 65               	bnf 	_RDLoop
(1)   96/      97 : 1C                  	inc 	rc 																	; step out 1.
(1)   97/      98 : 8C                  	glo 	rc 																	; if not half way down loop back.
(1)   98/      99 : 7E                  	shlc
(1)   99/      9A : 3B 5F               	bnf 	_RDResetMasks
(1)  100/      9C : (MACRO)             	return
(1)  100/      9C : E2                          sex     r2
(1)  100/      9D : 12                          inc     r2
(1)  100/      9E : 70                          ret
(1)  101/      9F :                     
(1)  102/      9F :                     ; ************************************************************************************************************
(1)  103/      9F :                     ; ************************************************************************************************************
(1)  104/      9F :                     ;
(1)  105/      9F :                     ;									Copy top half to bottom half upside down
(1)  106/      9F :                     ;
(1)  107/      9F :                     ;	Uses RE,RF
(1)  108/      9F :                     ; ************************************************************************************************************
(1)  109/      9F :                     ; ************************************************************************************************************
(1)  110/      9F :                     
(1)  111/      9F :                     MirrorDisplay:	
(1)  112/      9F : (MACRO)             	lri 	re,display 															; re points to screen top
(1)  112/      9F : F8 0F                       ldi     (DISPLAY)/256
(1)  112/      A1 : BE                          phi     RE
(1)  112/      A2 : F8 00                       ldi     (DISPLAY)&255
(1)  112/      A4 : AE                          plo     RE
(1)  113/      A5 :                     _MDLoop:
(1)  114/      A5 : 8E                  	glo 	re 																	; set up bottom pointer rf
(1)  115/      A6 : FB F8               	xri 	0F8h
(1)  116/      A8 : AF                  	plo 	rf	
(1)  117/      A9 : 9E                  	ghi	 	re
(1)  118/      AA : BF                  	phi 	rf
(1)  119/      AB : 4E                  	lda 	re 																	; copy data bumping rc
(1)  120/      AC : 5F                  	str 	rf
(1)  121/      AD : 1F                  	inc 	rf
(1)  122/      AE : 8E                  	glo 	re
(1)  123/      AF : FE                  	shl 	
(1)  124/      B0 : 3B A5               	bnf 	_MDLoop
(1)  125/      B2 : (MACRO)             	return
(1)  125/      B2 : E2                          sex     r2
(1)  125/      B3 : 12                          inc     r2
(1)  125/      B4 : 70                          ret
(1)  126/      B5 :                     
(1)  127/      B5 :                     
(1)  128/      B5 :                     		
      33/      B5 :                     	include maze.asm 															; maze creator.
(1)    1/      B5 :                     
(1)    2/      B5 :                     
(1)    3/      B5 :                     
(1)    4/      B5 :                     ; ************************************************************************************************************
(1)    5/      B5 :                     ; ************************************************************************************************************
(1)    6/      B5 :                     ;
 AS V1.42 Beta [Bld 102] - source file game.asm(maze.asm) - page 6 - 6/30/2016 14:54:37


(1)    7/      B5 :                     ;										Random Number Generator
(1)    8/      B5 :                     ;
(1)    9/      B5 :                     ; ************************************************************************************************************
(1)   10/      B5 :                     ; ************************************************************************************************************
(1)   11/      B5 :                     
(1)   12/      B5 :                     RandomNumber:
(1)   13/      B5 : (MACRO)             	lri 	rf,__RNHighM1+1
(1)   13/      B5 : F8 00                       ldi     (__RNHIGHM1+1)/256
(1)   13/      B7 : BF                          phi     RF
(1)   13/      B8 : F8 BC                       ldi     (__RNHIGHM1+1)&255
(1)   13/      BA : AF                          plo     RF
(1)   14/      BB :                     __RNHighM1:
(1)   15/      BB : F8 AC               	ldi 	0ACh																; get seeded value
(1)   16/      BD : F6                  	shr 																		; shift it right
(1)   17/      BE : 5F                  	str 	rf 																	; write it back
(1)   18/      BF : F8 C3               	ldi 	__RNLowM1+1 														; change pointer
(1)   19/      C1 : AF                  	plo 	rf
(1)   20/      C2 :                     __RNLowM1:
(1)   21/      C2 : F8 E1               	ldi 	0E1h 																; get upper seeded value
(1)   22/      C4 : 76                  	shrc  																		; rotate it right and in
(1)   23/      C5 : 5F                  	str 	rf 																	; write it back.
(1)   24/      C6 : E2                  	sex 	r2																	; save at TOS
(1)   25/      C7 : 52                  	str 	r2
(1)   26/      C8 : 3B D1               	bnf  	__RNNoToggle 														; if bit shifted out set
(1)   27/      CA :                     
(1)   28/      CA : F8 BC               	ldi 	__RNHighM1+1														; exor the high bit with $B4
(1)   29/      CC : AF                  	plo 	rf
(1)   30/      CD : 0F                  	ldn 	rf
(1)   31/      CE : FB B4               	xri 	0B4h
(1)   32/      D0 : 5F                  	str 	rf
(1)   33/      D1 :                     __RNNoToggle:
(1)   34/      D1 : 02                  	ldn 	r2 																	; read TOS.
(1)   35/      D2 : FE                  	shl 																		; put bit 7 into DF
(1)   36/      D3 : F8 00               	ldi 	0 																	; add 0 + (R2) + DF 
(1)   37/      D5 : 74                  	adc 	
(1)   38/      D6 : (MACRO)             	return 	
(1)   38/      D6 : E2                          sex     r2
(1)   38/      D7 : 12                          inc     r2
(1)   38/      D8 : 70                          ret
(1)   39/      D9 :                     
(1)   40/      D9 :                     
      34/      D9 :                     
      35/      D9 :                     	
 AS V1.42 Beta [Bld 102] - source file game.asm - page 7 - 6/30/2016 14:54:37


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
*CONSTPI :        3.141592653589793 - | *DATE :                   6/30/2016 - |
 DISPLAY :                      F00 - | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 INTERRUPT :                     34 C | *LISTON :                         1 - |
*MACEXP :                         1 - |  MAIN :                          11 C |
*MAP :                          E00 - |  MIRRORDISPLAY :                 9F C |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
*NESTMAX :                      100 - |  NEXT :                          11 C |
*PACKING :                        0 - | *PADDING :                        1 - |
 R0 :                             0 - |  R1 :                             1 - |
 R2 :                             2 - |  R3 :                             3 - |
 R4 :                             4 - | *R5 :                             5 - |
*R6 :                             6 - | *R7 :                             7 - |
*R8 :                             8 - | *R9 :                             9 - |
*RA :                             A - |  RANDOMNUMBER :                  B5 C |
*RB :                             B - |  RC :                             C - |
 RD :                             D - |  RE :                             E - |
 REFRESH :                       41 C | *RELAXED :                        0 - |
 REPAINTDISPLAY :                50 C |  RETURN :                        32 C |
 RF :                             F - |  STACK :                        DFF - |
*TIME :                    14:54:37 - | *TRUE :                           1 - |
*VERSION :                     142F - |  WAIT :                          30 C |
 _MDLOOP :                       A5 C |  _RDCLEAR :                      58 C |
 _RDDRAWBYTEBLOCKS :             73 C |  _RDLOOP :                       65 C |
 _RDNOSOLID :                    7E C |  _RDRESETMASKS :                 5F C |
 __RNHIGHM1 :                    BB C |  __RNLOWM1 :                     C2 C |
 __RNNOTOGGLE :                  D1 C |

     65 symbols
     36 unused symbols

 AS V1.42 Beta [Bld 102] - source file game.asm - page 8 - 6/30/2016 14:54:37


  defined macros:
  ---------------

CALL                                  | LRI                                  
RETURN                                |

      3 macros

 AS V1.42 Beta [Bld 102] - source file game.asm - page 9 - 6/30/2016 14:54:37


  codepages:
  ----------

STANDARD (0 changed characters)


0.02 seconds assembly time

    290 lines source file
    343 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
